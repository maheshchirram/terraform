
provider "aws" {
  region = "us-east-1"  # Replace with your desired AWS region
}

resource "aws_vpc" "aws_vpc" {
  cidr_block       = "10.81.0.0/16"
  
  tags = {
    Name = "test"
  }
}

resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.aws_vpc.id

  tags = {
    Name = "test-gw"
  }
}

resource "aws_subnet" "public" {
  vpc_id     = aws_vpc.aws_vpc.id
  cidr_block = "10.81.2.0/24"

  tags = {
    Name = "public"
  }
}

resource "aws_route_table" "public-route" {
  vpc_id = aws_vpc.aws_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.gw.id
  }

  tags = {
    Name = "mahesh"
  }
}

resource "aws_route_table_association" "a" {
  subnet_id      = aws_subnet.public.id
  route_table_id = aws_route_table.public-route.id
}

resource "aws_security_group" "SG" {
  name        = "allow-ssh-http-https"
  description = "Security group allowing SSH, HTTP, and HTTPS access"
  vpc_id      = aws_vpc.aws_vpc.id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Allow SSH access"
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Allow HTTP access"
  }

  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Allow HTTPS access"
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Allow all outbound traffic"
  }

  tags = {
    Name = "test-SG"
  }
}

resource "aws_network_interface" "test_nic" {
  subnet_id       = aws_subnet.public.id
  private_ips     = ["10.81.2.30"]
  security_groups = [aws_security_group.SG.id]

  tags = {
    Name = "INC"
  }
}

resource "aws_eip" "eip" {
  domain                    = "vpc"
  network_interface         = aws_network_interface.test_nic.id
  associate_with_private_ip = "10.81.2.30"

  tags = {
    Name = "test_eip"
  }
}


resource "aws_instance" "test_fb" {
  ami           = "ami-02457590d33d576c3"
  key_name      = "git"
  instance_type = "t2.micro"
  user_data     = "${file("main.sh")}"
  
    network_interface {
      network_interface_id = aws_network_interface.test_nic.id
      device_index =  0
    }
  

  tags = {
    Name = "terraform"
  }
}


output "aws_pub_ip" {
  value = aws_instance.test_fb.public_ip
} 
